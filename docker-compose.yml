version: '3'

services:
#
# Entrypoint : NGinx proxy
  nginx-entrypoint:
    image: ${COMPOSE_PROJECT_NAME}_nginx-entrypoint:latest
    container_name: nginx-entrypoint4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    expose:
      - "80" 
    build:
      context: ./proxy
    environment:
      - DHPARAM_GENERATION=false
      - VIRTUAL_HOST=sdi.elasticlabs.co
      - VIRTUAL_PORT=80
      - LETSENCRYPT_HOST=sdi.elasticlabs.co
      - LETSENCRYPT_EMAIL=patrice.mauny@gmail.com
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - sdi-proxy
      - sdi

#
# Applications
  geonetwork:
    build: ./geonetwork
    container_name: geonetwork4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    depends_on: 
      - nginx-entrypoint
      - es01
      - kibana
    expose: 
      - "8080"
    env_file:
      - ./geonetwork/.env
    volumes:
      - geonetwork-base:/usr/local/geonetwork
      - geonetwork-data:/var/local/geonetwork
    networks:
      - sdi

  geoserver:
    build: ./geoserver
    container_name: geoserver4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    depends_on: 
      - nginx-entrypoint
      - postgis
      - pgadmin
    expose: 
      - "8080"
    volumes:
      - geoserver-data:/var/local/geoserver
      - geoserver-exts:/var/local/geoserver-exts   
    networks:
      - sdi

  # Tileserver-gl (https://github.com/maptiler/tileserver-gl)
  tileserver-gl:
    image: maptiler/tileserver-gl:latest
    container_name: tileserver4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    depends_on: 
      - nginx-entrypoint
    expose: 
      - "80"
    volumes:
      - mbtiles-data:/data
    networks:
      - sdi
  
    # Client application : MapStore2
  mapstore2:
    image: geosolutionsit/mapstore2:latest
    container_name: mapstore4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    expose: 
      - "8080"
    networks:
      - sdi

  #
  # Backend databases & Admin tools
  # Elasticsearch :
  #   -> generic parameters are located here for configuration readability
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.2
    container_name: elastic01-4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    expose:
      - "9200"
    environment:
      - VIRTUAL_HOST=es01.sdi.elasticlabs.co
      - VIRTUAL_PORT=9200
      - node.name=es01
      - discovery.type=single-node
      - cluster.name=es-sdi-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data01:/usr/share/elasticsearch/data
    networks:
      - sdi

  # Kibana :
  #   -> Configuration guide at https://www.elastic.co/guide/en/kibana/7.4/settings.html
  kibana:
    image: docker.elastic.co/kibana/kibana:7.4.2
    container_name: kibana4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    expose:
      - "5601"
    depends_on:
      - es01
    environment:
      - SERVER_NAME=kibana.sdi.elasticlabs.co
      - ELASTICSEARCH_HOSTS=http://es01.sdi.elasticlabs.co
    volumes:
      - ./elk-config/kibana.yml:/usr/share/kibana/config/kibana.yml
    networks:
      - sdi

  # pgAdmin & PostGIS
  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    container_name: pgadmin4${COMPOSE_PROJECT_NAME}
    expose: 
      - "80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - '/tmp/servers.json:/servers.json'
    env_file:
      - ./postgis/pgadmin.env
    networks:
      - sdi

  postgis:
    build: ./postgis
    restart: unless-stopped
    container_name: PostGIS4${COMPOSE_PROJECT_NAME}
    expose: 
      - "5432"
    stdin_open: true
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    env_file:
      - ./postgis/db.env
    networks:
      - sdi

  #GeoHealthCheck
  ghc_web:
    image: geopython/geohealthcheck:latest
    container_name: GeoHealthCheck4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      - ghc_runner
    env_file:
      - ./geohealthcheck/ghc.env
    volumes:
      - ghc_db:/GeoHealthCheck/DB
    networks:
      - sdi

  ghc_runner:
    image: geopython/geohealthcheck:latest
    container_name: ghc_runner4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    env_file:
      - ./geohealthcheck/ghc.env
    entrypoint:
      - /run-runner.sh
    volumes:
      - ghc_db:/GeoHealthCheck/DB
    networks:
      - sdi  

volumes:
  geonetwork-base:
  geonetwork-data:
  geoserver-exts:
  geoserver-data:
  es-data01:
  dbdata:
  dbbackups:
  pgadmin_data:
  ghc_db:
  mbtiles-data:

# Networks. Note that the following network should be existing and connected 
# to your nginx-proxy container for proper docker-gen containers detections, 
# and further SSL certificates creation.
#
# e.g.  sudo docker network create sdi-proxy && sudo sudo docker network connect sdi-proxy <target HTTPS reverse proxy>
networks:
  sdi-proxy:
    external:
      name: sdi-proxy
  sdi: